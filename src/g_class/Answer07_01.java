package g_class;

/**
 * 【クラス】
 * 下記の例では、Humanクラスをインスタンス化し、変数に値を代入してコンソールに表示しています。
 * 同様に「自分自身の情報を持った変数を作成」し、コンソールに表示してみましょう。
 */

public class Answer07_01 {

	public static void main(String[] args) {
		Human tarao = new Human();
		tarao.nickname = "タラちゃん";
		tarao.age = 3;
		System.out.println(tarao.nickname + "は" + tarao.age + "歳");

		Human togashi = new Human();
		togashi.nickname = "とがし";
		togashi.age = 27;
		System.out.println(togashi.nickname + "は" + togashi.age + "歳");
	}

}

//Humanクラスがg_classの下にあるところがみそ




/*
 * クラスの宣言
オブジェクトがどんな情報（データ）を持ち、どんな機能（処理）を備えているかを定義するのがクラスです。
Java言語でのプログラミングをマスターする上では、 クラスを理解することがとても重要です。

	Java 言語でクラスを記述するときには、次のように書きます。
	[修飾子] class クラス名{
	    クラスの内容
	}
※［修飾子］にはpublicというキーワードが入ることがあります。
このように、クラスをプログラムコードに記述することを、「クラスを定義する」または「クラスを宣言する」といいます。

「クラスの内容」の部分には、 フィールドとメソッドの宣言が含まれます（これらをまとめてメンバと呼ぶことがあります）。
クラスはオブジェクトが持つ情報と機能を定義するものだといいましたが、フィールドが情報、メソッドが機能に対応します。
具体的には、フィールドは値を格納するための変数、メソッドは命令文をまとめたものです。

フィールドとメソッドという言葉を使うと、クラスの記述は次のようになります。
	[修飾子] class クラス名{
	    フィールドの宣言 //クラスが持つ情報（値を格納する変数）を記述します
	    メソッドの宣言 //クラスが持つ機能（命令文のまとまり）を記述します
	}
なお、これまでに例として取り上げたプログラムは、すべて1つのクラスで作られていました。
以降では複数のクラスを使って1つのプログラムを作る方法も学んでいきます。

まとめ
●	Java言語はオブジェクト指向言語の1つです
●	オブジェクト指向言語では、プログラム部品であるオブジェクトを組み合わせて1つのプログラムを完成させます
●	クラスはオブジェクトが持つ情報と機能を定義するものです
●	Java言語でプログラミングするということは、クラスを宣言することです
●	Java 言語のプログラムは1 つ以上のクラスから構成されます
●	クラスには、フィールドとメソッドが含まれます

*/

/*
 * インスタンスの生成
先程のプログラムコード(Human.java)によって、xとyの値を格納するためのPointクラスを宣言できました。
次は、点の情報（座標）を格納するためのオブジェクトを、Point クラスに基づいて生成します。
生成にはnewというキーワードを使い、

	new Point()

と記述します。これで、Pointクラスの宜言に基づいてxとyの値を格納できるオブジェクトが1つ、コンピュータの中に生成されます。
このようにnewキーワードにより、クラスに基づいて生成されるオブジェクトのことをインスタンスと呼びます。
（「Pointクラスのインスタンス」のことを「Pointオブジェクト」ともいいます)


★実際の使い方★
次のように記述することで、生成したPointクラスのインスタンスを変数pに代入できます。

	Point p = new Point();

このように、インスタンスを代入する変数の型には、そのクラス名（ここではPoint) を指定します。pは ”Point型の変数”となります。
この変数pに代入されたインスタンスが持つ変数xとyには、次のようにして値を代人できます。xに10を、 yに5を代入しています。
	p.x = 10;
	p.y = 5;

Pointクラスに定義されている変数xとyは、インスタンスに情報を格納するために使用できます。これらをインスタンス変数とも呼びます。
インスタンス変数を参照するときには「p.x」のように、
	インスタンスを代入した変数の名前 ＋ ドット （.）＋インスタンス変数の名前
という形で記述します。


ではこのPointクラスを使って、実際に複数の点の情報を管理するプログラムを作成してみましょう。
	■ PointInstanceExample.java
	class Point{
		int x;
		int y;
	}

	public class PointInstanceExample {
		public static void main(String[] args) {
			Point p1 = new Point();
			p1.x = 10;
			p1.y = 5;

			Point p2 = new Point();
			p2.x = 5;
			p2.y = 2;

			System.out.println("p1のx座標は" + p1.x);
			System.out.println("p1のy座標は" + p1.y);
			System.out.println("p2のx座標は" + p2.x);
			System.out.println("p2のy座標は" + p2.y);

		}

	}

3. まとめ
●	クラスに基づいて作られるオブジェクトを「インスタンス」と呼びます
●	1つのクラスからは、インスタンスをいくつでも生成できます
●	フィールドにはインスタンス変数と呼ばれる変数を宜言でき、インスタンス名にドット（.）をつけて参照できます

*/